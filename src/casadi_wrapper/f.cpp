/* This file was automatically generated by CasADi.
   The CasADi copyright holders make no ownership claim of its contents. */


/* How to prefix internal symbols */
#ifdef CASADI_CODEGEN_PREFIX
#define CASADI_NAMESPACE_CONCAT(NS, ID) _CASADI_NAMESPACE_CONCAT(NS, ID)
#define _CASADI_NAMESPACE_CONCAT(NS, ID) NS ## ID
#define CASADI_PREFIX(ID) CASADI_NAMESPACE_CONCAT(CODEGEN_PREFIX, ID)
#else
#define CASADI_PREFIX(ID) f_ ## ID
#endif

#include <math.h>

#ifndef casadi_real
#define casadi_real double
#endif

#ifndef casadi_int
#define casadi_int long long int
#endif

/* Add prefix to internal symbols */
#define casadi_f0 CASADI_PREFIX(f0)
#define casadi_s0 CASADI_PREFIX(s0)
#define casadi_s1 CASADI_PREFIX(s1)
#define casadi_sq CASADI_PREFIX(sq)

/* Symbol visibility in DLLs */
#ifndef CASADI_SYMBOL_EXPORT
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#if defined(STATIC_LINKED)
#define CASADI_SYMBOL_EXPORT
#else
#define CASADI_SYMBOL_EXPORT __declspec(dllexport)
#endif
#elif defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#define CASADI_SYMBOL_EXPORT __attribute__ ((visibility ("default")))
#else
#define CASADI_SYMBOL_EXPORT
#endif
#endif

#include <casadi_kin_dyn/casadi_collision_handler.h>

namespace casadi_kin_dyn
{
    extern CasadiCollisionHandler* get_collision_handler();
}

using namespace casadi_kin_dyn;

#ifdef __cplusplus
extern "C" {
#endif



static casadi_int collision_distance_s_in[3] = {-1, 1, 1};
static casadi_int collision_distance_s_out[3] = {-1, 1, 1};

/* collision_distance:(q[5])->(d[10]) */
static int casadi_f0(const casadi_real** arg,
                     casadi_real** res,
                     casadi_int* iw,
                     casadi_real* w,
                     int mem)
{
    auto ch = get_collision_handler();

    bool ret = ch->distance(Eigen::VectorXd::Map(arg[0], ch->kd()->nq()),
                            Eigen::VectorXd::Map(res[0], ch->numPairs()));

    return ret ? 0 : 1;
}

CASADI_SYMBOL_EXPORT int collision_distance(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
    return casadi_f0(arg, res, iw, w, mem);
}

CASADI_SYMBOL_EXPORT int collision_distance_alloc_mem(void) {
    return 0;
}

CASADI_SYMBOL_EXPORT int collision_distance_init_mem(int mem) {
    return 0;
}

CASADI_SYMBOL_EXPORT void collision_distance_free_mem(int mem) {
}

CASADI_SYMBOL_EXPORT int collision_distance_checkout(void) {
    return 0;
}

CASADI_SYMBOL_EXPORT void collision_distance_release(int mem) {
}

CASADI_SYMBOL_EXPORT void collision_distance_incref(void) {
}

CASADI_SYMBOL_EXPORT void collision_distance_decref(void) {
}

CASADI_SYMBOL_EXPORT casadi_int collision_distance_n_in(void) { return 1;}

CASADI_SYMBOL_EXPORT casadi_int collision_distance_n_out(void) { return 1;}

CASADI_SYMBOL_EXPORT casadi_real collision_distance_default_in(casadi_int i){
    switch (i) {
    default: return 0;
    }
}

CASADI_SYMBOL_EXPORT const char* collision_distance_name_in(casadi_int i){
    switch (i) {
    case 0: return "q";
    default: return 0;
    }
}

CASADI_SYMBOL_EXPORT const char* collision_distance_name_out(casadi_int i){
    switch (i) {
    case 0: return "d";
    default: return 0;
    }
}

CASADI_SYMBOL_EXPORT const casadi_int* collision_distance_sparsity_in(casadi_int i) {

    auto ch = get_collision_handler();

    collision_distance_s_in[0] = ch->kd()->nq();

    switch (i) {
    case 0: return collision_distance_s_in;
    default: return 0;
    }
}

CASADI_SYMBOL_EXPORT const casadi_int* collision_distance_sparsity_out(casadi_int i) {

    auto ch = get_collision_handler();

    collision_distance_s_out[0] = ch->numPairs();

    switch (i) {
    case 0: return collision_distance_s_out;
    default: return 0;
    }
}

CASADI_SYMBOL_EXPORT int collision_distance_work(casadi_int *sz_arg,
                                                 casadi_int* sz_res,
                                                 casadi_int *sz_iw,
                                                 casadi_int *sz_w) {
    if (sz_arg) *sz_arg = 1;
    if (sz_res) *sz_res = 1;
    if (sz_iw) *sz_iw = 0;
    if (sz_w) *sz_w = 0;
    return 0;
}


#ifdef __cplusplus
} /* extern "C" */
#endif
